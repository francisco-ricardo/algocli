#!/usr/bin/env python3
"""
Algorithm CLI

This script provides a command-line interface (CLI) for various
algorithmic functions. It allows the user to run the algorithms and
unit tests from the command line.

Sub-commands:
    - is_valid_subsequence: Check if a sequence is a valid subsequence
      of another sequence.
        Example:
            python algocli is_valid_subsequence "1,2,3,4" "2,4"
    - non_constructible_change: Find the minimum non-constructible
      change that cannot be created with given coins.
        Example:
            python algocli non_constructible_change "1,2,5"
    - sorted_squared_array: Return a sorted array of the squares of
      the input array.
        Example:
            python algocli sorted_squared_array "-4,-1,0,3,10"
    - two_numbers_sum: Find two numbers in the list that sum to the
      target value.
        Example:
            python algocli two_numbers_sum "3,5,-4,8,11,1,-1,6" 10
    - two_numbers_sum_2: Find two numbers in the list that sum to the
      target value.
        Example:
            python algocli two_numbers_sum_2 "3,5,-4,8,11,1,-1,6" 10
    - tournament_winner: Determine the winner of a tournament based
      on competition results.
        Example:
            python algocli tournament_winner -i "HTML,CSS,0" -i
            "CSS,Python,1" -i "Python,HTML,1"
    - remove_duplicates_from_sorted_array: Remove duplicates from a
      sorted array in place.
        Example:
            python algocli remove_duplicates_from_sorted_array "1,1,2"
    - test: Run unit tests for the algorithms.
        Example:
            python algocli test
"""

import argparse
import re
from typing import Generator
import unittest

from algorithms.is_valid_subsequence import run as is_valid_subsequence
from algorithms.non_constructible_change import run as non_constructible_change
from algorithms.sorted_squared_array import run as sorted_squared_array
from algorithms.two_numbers_sum import run as two_numbers_sum   
from algorithms.two_numbers_sum_2 import run as two_numbers_sum_2
from algorithms.tournament_winner import run as tournament_winner
from algorithms.remove_duplicates_from_sorted_array import run as remove_duplicates_from_sorted_array

from test.cases import TestIsValidSubsequence
from test.cases import TestNonConstructibleChange
from test.cases import TestSortedSquaredArray
from test.cases import TestTwoNumbersSum
from test.cases import TestTwoNumbersSum2
from test.cases import TestTournamentWinner
from test.cases import TestRemoveDuplicatesFromSortedArray


def main():
    """
    Parses command-line arguments and executes the corresponding function.
    """

    #
    # Command line arguments definition
    #

    parser = argparse.ArgumentParser(description='Algorithm CLI')
    subparsers = parser.add_subparsers(dest='command')

    # Sub-command: is_valid_subsequence    
    parser_is_valid_subsequence = subparsers.add_parser('is_valid_subsequence', 
        help='Check if a sequence is a valid subsequence of another sequence',
        description="""Check if a sequence is a valid subsequence of another sequence.
                    Example: algocli is_valid_subsequence '1,2,3,4' '2,4'""")
    parser_is_valid_subsequence.add_argument('sequence', type=str, 
        help="The sequence to check. Example: '1,2,3,4'")
    parser_is_valid_subsequence.add_argument('subsequence', type=str, 
        help="The subsequence to validate. Example: '2,4'")
    
    # Sub-command: non_constructible_change
    parser_non_constructible_change = subparsers.add_parser('non_constructible_change', 
        help='Find the min non-constructible change that cannot be created with given coins',
        description="""Find the minimum non-constructible change that cannot be created with given coins.
                    Example: algocli non_constructible_change '1,2,5'""")
    parser_non_constructible_change.add_argument('coins', type=str, 
        help="List of integers separated by comma. Example: '1,2,5'")

    # Sub-command: sorted_squared_array
    parser_sorted_squared_array = subparsers.add_parser('sorted_squared_array', 
        help='Return a sorted array of the squares of the input array',
        description="""Return a sorted array of the squares of the input array.
                    Example: algocli sorted_squared_array '4,-1,0,3,10'""",
        epilog="""Note: If the first number in the list is negative, use a double dash (--) 
        before the argument to avoid confusion with options. Example: -- '-4,-1,0,3,10'""")
    parser_sorted_squared_array.add_argument('array', type=str,
         help="List of integers separated by comma. Example: '4,-1,0,3,10'")

    # Sub-command: two_numbers_sum
    parser_two_numbers_sum = subparsers.add_parser('two_numbers_sum', 
        help='Find the indices of the two numbers in the list that sum up to the target value',
        description="""Find the indices of the two numbers in the list that sum up to the target value.
                    Example: algocli two_numbers_sum_2 '3,5,-4,8,11,1,-1,6' 10""",
        epilog="""Note: If the first number in the list is negative, use a double dash (--) 
        before the argument to avoid confusion with options. Example: -- '-3,5,-4,8,11,1,-1,6'""")
    parser_two_numbers_sum.add_argument('numbers', type=str, 
        help="List of numbers separated by comma. Example: '3,5,-4,8,11,1,-1,6'")
    parser_two_numbers_sum.add_argument('target', type=int, 
        help='The target sum. Example: 10')    
    
    # Sub-command: two_numbers_sum_2
    parser_two_numbers_sum_2 = subparsers.add_parser('two_numbers_sum_2', 
        help='Find two numbers in the list that sum up to the target value',
        description="""Find two numbers in the list that sum up to the target value.
                    Example: algocli two_numbers_sum_2 '3,5,-4,8,11,1,-1,6' 10""",
        epilog="""Note: If the first number in the list is negative, use a double dash (--) 
        before the argument to avoid confusion with options. Example: -- '-3,5,-4,8,11,1,-1,6'""")
    parser_two_numbers_sum_2.add_argument('numbers', type=str, 
        help="List of numbers separated by comma. Example: '3,5,-4,8,11,1,-1,6'")
    parser_two_numbers_sum_2.add_argument('target', type=int, 
        help='The target sum. Example: 10')

    # Sub-command: tournament_winner
    parser_tournament_winner = subparsers.add_parser('tournament_winner', 
        help=' Determine the winner of a tournament based on competition results',
        description="""Determine the winner of a tournament based on competition results.
                    Example:
                    algocli tournament_winner -i 'HTML,CSS,0' -i 'CSS,Python,1' -i 'Python,HTML,1'""")
    parser_tournament_winner.add_argument('--input', '-i', nargs='+', type=str, action='append', 
        help="""A string consisting of the home team, the away team and the result, separated by commas. 
        Example: 'C#, Python, 1'""")
    
    # Sub-command: remove_duplicates_from_sorted_array
    parser_remove_duplicates_from_sorted_array = subparsers.add_parser('remove_duplicates_from_sorted_array', 
        help='Remove duplicates from a sorted array in place',
        description="""Remove duplicates from a sorted array in place.
                    Example: algocli remove_duplicates_from_sorted_array '1,1,2'""")
    parser_remove_duplicates_from_sorted_array.add_argument('nums', type=str, 
        help="List of integers separated by comma. Example: '1,1,2'")

    # Sub-command: test
    parser_test = subparsers.add_parser('test', 
        help='Run unit tests for the algorithms',
        description='Run unit tests for the algorithms')
    
    args = parser.parse_args()
    

    # Execute the selected command
    if args.command == 'non_constructible_change':
        run_non_constructible_change(args)    
    elif args.command == 'is_valid_subsequence':
        run_is_valid_subsequence(args)
    elif args.command == 'sorted_squared_array':
        run_sorted_squared_array(args)
    elif args.command == 'two_numbers_sum':
        run_two_numbers_sum(args)
    elif args.command == 'two_numbers_sum_2':
        run_two_numbers_sum_2(args)
    elif args.command == 'tournament_winner':
        run_tournament_winner(args.input)
    elif args.command == 'remove_duplicates_from_sorted_array':
        print(args)
        run_remove_duplicates_from_sorted_array(args)
    elif args.command == 'test':
        run_test()


#
# Functions Definitions
#

def run_non_constructible_change(args: str) -> None:
    """
    Executes the non_constructible_change algorithm.
    """
    coins: list[int] = parse_args_as_int(args.coins)
    result: int = non_constructible_change(coins)
    print(f'Minimum non-constructible change: {result}')


def run_is_valid_subsequence(args: str) -> None:
    """
    Executes the is_valid_subsequence algorithm.
    """
    sequence: list[int] = parse_args_as_int(args.sequence)
    subsequence: list[int] = parse_args_as_int(args.subsequence)
    result: bool = is_valid_subsequence(sequence, subsequence)
    print(f'Is valid subsequence: {result}')


def run_sorted_squared_array(args: str) -> None:
    """
    Executes the sorted_squared_array algorithm.
    """
    array: list[int] = parse_args_as_int(args.array)
    result: list[int] = sorted_squared_array(array)
    print(f'Sorted squared array: {result}')


def run_two_numbers_sum(args: str) -> None:
    """
    Executes the two_numbers_sum algorithm.
    """
    numbers: list[int] = parse_args_as_int(args.numbers)
    target: int = args.target
    result: list[int] = two_numbers_sum(numbers, target)
    print(f'Indices of the two numbers that sum to the target: {result}')


def run_two_numbers_sum_2(args: str) -> None:
    """
    Executes the two_numbers_sum_2 algorithm.
    """
    numbers: list[int] = parse_args_as_int(args.numbers)
    target: int = args.target
    result: list[int] = two_numbers_sum_2(numbers, target)
    print(f'Two numbers that sum to the target: {result}')


def run_tournament_winner(args: list[str]) -> None:
    """
    Executes the tournament_winner algorithm.
    """
    competitions = []
    results = []
    for arg in args:
        try:
            parts = parse_args_as_string(arg[0])
        except IndexError:
            raise ValueError(f'Invalid input: {arg}')
        else:
            if (len(parts) != 3):
                raise ValueError(f'Invalid input: {arg}')
        competitions.append([parts[0], parts[1]])
        results.append(int(parts[2]))
    result = tournament_winner(competitions, results)
    print(f'Tournament winner: {result}')


def run_remove_duplicates_from_sorted_array(args: str) -> None:
    """
    Executes the remove_duplicates_from_sorted_array algorithm.
    """
    nums: list[int] = parse_args_as_int(args.nums)
    result: int = remove_duplicates_from_sorted_array(nums)
    print(f'Array after removing duplicates: {nums[:result]}')


def run_test() -> None:
    """
    Runs unit tests for all algorithms.
    """
    suite1 = unittest.TestLoader().loadTestsFromTestCase(TestIsValidSubsequence)
    suite2 = unittest.TestLoader().loadTestsFromTestCase(TestNonConstructibleChange)
    suite3 = unittest.TestLoader().loadTestsFromTestCase(TestSortedSquaredArray)
    suite4 = unittest.TestLoader().loadTestsFromTestCase(TestTwoNumbersSum)
    suite5 = unittest.TestLoader().loadTestsFromTestCase(TestTwoNumbersSum2)
    suite6 = unittest.TestLoader().loadTestsFromTestCase(TestTournamentWinner)
    suite7 = unittest.TestLoader().loadTestsFromTestCase(TestRemoveDuplicatesFromSortedArray)
    all_tests= unittest.TestSuite([suite1, suite2, suite3, suite4, suite5, suite6, suite7])
    unittest.TextTestRunner().run(all_tests)


#
# Helper functions
#

def args_list_generator(args: str) -> Generator[str, None, None]:
    """
    Generates a list of arguments from a comma-separated string.
    """
    return (item for item in re.split(r'\s*,\s*', args))


def parse_args_as_string(args: str) -> list[str]:
    """
    Parses a comma-separated string into a list of strings.
    """
    return [item for item in args_list_generator(args)]


def parse_args_as_int(args: str) -> list[int]:
    """
    Parses a comma-separated string into a list of integers.
    """
    return [int(item) for item in args_list_generator(args)]


if __name__ == '__main__':
    main()

# EOF
