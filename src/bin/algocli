#!/usr/bin/env python3

import argparse
import re
import unittest

from algorithms.is_valid_subsequence import run as is_valid_subsequence
from algorithms.non_constructible_change import run as non_constructible_change
from algorithms.sorted_squared_array import run as sorted_squared_array
from algorithms.two_numbers_sum import run as two_numbers_sum
from algorithms.tournament_winner import run as tournament_winner

from test.cases import TestIsValidSubsequence
from test.cases import TestNonConstructibleChange
from test.cases import TestSortedSquaredArray
from test.cases import TestTwoNumbersSum


def main():
    parser = argparse.ArgumentParser(description='Algorithm CLI')
    subparsers = parser.add_subparsers(dest='command')

    # Sub-command: is_valid_subsequence
    parser_is_valid_subsequence = subparsers.add_parser('is_valid_subsequence', help='Check if a sequence is a valid subsequence')
    parser_is_valid_subsequence.add_argument('sequence', type=str, help='The sequence to check')
    parser_is_valid_subsequence.add_argument('subsequence', type=str, help='The subsequence to validate')
    
    # Sub-command: non_constructible_change
    parser_non_constructible_change = subparsers.add_parser('non_constructible_change', help='Find the minimum non-constructible change')
    parser_non_constructible_change.add_argument('coins', type=str, help='List of coins separated by comma')

    # Sub-command: sorted_squared_array
    parser_sorted_squared_array = subparsers.add_parser('sorted_squared_array', help='Sort the squared array')
    parser_sorted_squared_array.add_argument('array', type=str, help='List of integers separated by comma')

    # Sub-command: two_numbers_sum
    parser_two_numbers_sum = subparsers.add_parser('two_numbers_sum', help='Find the two numbers that sum to the target')
    parser_two_numbers_sum.add_argument('numbers', type=str, help='List of numbers separated by comma')
    parser_two_numbers_sum.add_argument('target', type=int, help='The target sum')

    # Sub-command: tournament_winner
    # TODO: Implement the tournament_winner algorithm
    parser_tournament_winner = subparsers.add_parser('tournament_winner', help='Find the tournament winner')
    parser_tournament_winner.add_argument('--input', '-i', nargs='+', type=str, action='append', help='Compeitition and the result')

    # Sub-command: test
    parser_test = subparsers.add_parser('test', help='Run tests for the algorithms')
    
    args = parser.parse_args()

    if args.command == 'non_constructible_change':
        coins = parse_int_list(args.coins)
        result = non_constructible_change(coins)
        print(f'Minimum non-constructible change: {result}')
    
    elif args.command == 'is_valid_subsequence':
        sequence = parse_int_list(args.sequence)
        subsequence = parse_int_list(args.subsequence)
        result = is_valid_subsequence(sequence, subsequence)
        print(f'Is valid subsequence: {result}')

    elif args.command == 'sorted_squared_array':
        array = parse_int_list(args.array)
        result = sorted_squared_array(array)
        print(f'Sorted squared array: {result}')

    elif args.command == 'two_numbers_sum':
        numbers = parse_int_list(args.numbers)
        target = args.target
        result = two_numbers_sum(numbers, target)
        print(f'Two numbers that sum to the target: {result}')

    elif args.command == 'tournament_winner':
        run_tournament_winner(args.input)


    elif args.command == 'test':
        run_test()        




# TODO: Implement the run_tournament_winner function
def run_tournament_winner(args: list[str]) -> None:
    competitions = []
    results = []
    for arg in args:
        parts = parse_list(arg[0])
        if (len(parts) != 3):
            raise ValueError('Invalid input')
        competitions.append([parts[0], parts[1]])
        results.append(int(parts[2]))

    print(competitions)
    print(results)

    result = tournament_winner(competitions, results)
    print(f'Tournament winner: {result}')



    

def parse_list(s: str) -> list[str]:
    return [item for item in re.split(r'\s*,\s*', s)]

def parse_int_list(s: str) -> list[int]:
    return [int(item) for item in re.split(r'\s*,\s*', s)]


def run_test() -> None:
    suite1 = unittest.TestLoader().loadTestsFromTestCase(TestIsValidSubsequence)
    suite2 = unittest.TestLoader().loadTestsFromTestCase(TestNonConstructibleChange)
    suite3 = unittest.TestLoader().loadTestsFromTestCase(TestSortedSquaredArray)
    suite4 = unittest.TestLoader().loadTestsFromTestCase(TestTwoNumbersSum)

    all_tests= unittest.TestSuite([suite1, suite2, suite3, suite4])
    unittest.TextTestRunner().run(all_tests)


if __name__ == '__main__':
    main()
